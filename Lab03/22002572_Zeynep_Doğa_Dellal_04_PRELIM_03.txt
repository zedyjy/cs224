#CS224
#Lab No: 03
#Section No: 04
#Zeynep Doğa Dellal
#22002572
#24 10 2023

	.text
# CS224, Program to be used in Lab 3
# October 16, 2023

	li	$a0, 5 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	move	$a1, $v0	# Pass the linked list address in $a0
	jal 	printLinkedList
		
	move	$a0, $v0	# Pass the linked list address in $a0
	jal countUniqueKeys
	
	jal sumLinkedList
	
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	printLinkedList
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 12
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
# sll: So that node 1 data value will be 4, node i data value will be 4*i
	li $v0, 4
    	la $a0, getKey
    	syscall
    	# read the size of the array from the user
    	li $v0, 5
    	syscall
    	move $s4, $v0
    	
    	sw	$s4, 4($s2)	# Store the data value.
    	
    	li $v0, 4
    	la $a0, getData
    	syscall
    	# read the size of the array from the user
    	li $v0, 5
    	syscall
    	move $s4, $v0

	sw	$s4, 8($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 12 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	
	li $v0, 4
    	la $a0, getKey
    	syscall
    	# read the size of the array from the user
    	li $v0, 5
    	syscall
    	move $s4, $v0
    	
    	sw	$s4, 4($s2)	# Store the data value.
    	
    	li $v0, 4
    	la $a0, getData
    	syscall
    	# read the size of the array from the user
    	li $v0, 5
    	syscall
    	move $s4, $v0
	
	sw	$s4, 8($s2)	# Store the data value.
	
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -28
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$s4, 24($sp)
	sw	$s5, 28($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s5, $a0	# $s0: points to the current node.
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	lw	$s4, 8($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, keyValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s4	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
	move $v0, $s5	# $s0: points to the current node.
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	lw	$s4, 24($sp)
	lw	$s5, 28($sp)
	addi	$sp, $sp, 28
	jr	$ra
	
countUniqueKeys:
    addi $sp, $sp, -28
    sw $s0, 16($sp)
    sw $s1, 12($sp)
    sw $s2, 8($sp)
    sw $s3, 4($sp)
    sw $s4, 24($sp)
    sw $s5, 28($sp)
    sw $ra, 0($sp)  # Save $ra just in case we may want to call a subprogram

    move $s0, $a0   # $s0: points to the current node.
    move $s5, $a0   # $s5: points to the current node.
    li $s3, 0
    li $s2, -1       # $s2: Initialize with an invalid key

countNext:
    beq $s0, $zero, countAll
    # $s0: Address of current node
    lw $s1, 0($s0)   # $s1: Address of next node
    beqz $s1, last  # If $s1 is zero, it's the end of the list

    lw $s4, 4($s1)   # $s4: key of next node

    beq $s4, $s2, skip  # If the key matches the previous one, skip
    addi $s3, $s3, 1

    # Store the current key as the previous key
    move $s2, $s4

skip:
    move $s0, $s1   # Consider the next node
    j countNext

last:
    # If we reach the last node, and it has a unique key, count it as well.
    addi $s3, $s3, 1

countAll:
    move $a0, $s3 
    move $v0, $s5 

    # Restore the register values
    lw $ra, 0($sp)
    lw $s3, 4($sp)
    lw $s2, 8($sp)
    lw $s1, 12($sp)
    lw $s0, 16($sp)
    lw $s4, 24($sp)
    lw $s5, 28($sp)
    addi $sp, $sp, 28
    jr $ra


sumLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -28
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$s5, 24($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	
	move	$s5, $a1
	move	$s6, $a1
	li	$t7, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 12 bytes: link field then data field.
	li	$a0, 12
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
fillNewList:
	# Are we done?
	# No. of nodes created compared with the number of nodes to be created.
	beq	$t7, $s0, sumDone
	addi	$t7, $t7, 1	# Increment node counter.
	lw 	$t0, 4($s6)
	li	$t2, 0
	countNextSum:
		beqz	$s5, skipSum
    		
		lw	$s1, 0($s5)
		beqz 	$s1, skipSum  # If $s1 is zero, it's the end of the list
		lw	$s4, 4($s1)
		
		beq	$t0, $s4, addSame
		bne	$t0, $s4, next
		# Connect the this node to the lst node pointed by $s2.
		j	countNextSum
		
    	skipSum:
    		move 	$s6, $s1   # Consider the next node
    		li	$a0, 12 		# Remember: Node size is 8 bytes.
		li	$v0, 9
		syscall
		
    		sw	$t2, 8($s2)	# Store the data value.
    		sw	$t0, 4($s2)
    		sw	$v0, 0($s2)
    		
		# Now make $s2 pointing to the newly created node.
		move	$s2, $v0	# $s2 now points to the new node.
		#li	$t2, 0
		move	$s5, $a1
		addi	$t7, $t7, 1	# Increment node counter.
		beq	$t7, $s0, sumDone
		j countNextSum
		
    	next: 
    		lw	$t0, 4($s1)
    		move 	$s5, $s1
		j	countNextSum
    		
	addSame:
		lw 	$t1, 8($s5)
		add 	$t2, $t1, $zero
		move 	$s5, $s1
		j	countNextSum
	
sumDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	jr	$ra

#=========================================================		
	.data
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "
	
keyValueOfCurrentNode:
	.asciiz	"\n Key Value of Current Node: "

getKey:
	.asciiz	"\n Enter key value: "
	
getData:
	.asciiz	"\n Enter data value: "
####################################################################

#CS224
#Lab No: 03
#Section No: 04
#Zeynep Doğa Dellal
#22002572
#24 10 2023
#####################################QUESTION 1############################################
.data 
message: .asciiz "Please enter the register number:"
result: .asciiz "Count for the usage of entered register number: "
error: .asciiz "Out of range input. \n"

.text
main:
	la $a0, message
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	blt $v0, 1, finish
	bgt $v0, 31, finish
	
	move $s0, $v0 #register number searched for
	move $s1, $zero #counter for the register 
	 
	jal subprogram
	
subprogram:
	addi $sp, $sp, -32
	sw $s0, 8($sp) 
	sw $s1, 4($sp) 
	addi $s2, $ra, 20 
	sw $s2, 0($sp)

	add $t0, $t0, $t1
	
	la $t2, message
	lw $t1, 0($t2)
	jal getRaInstruction
	
getRaInstruction:
	sw $ra, 12($sp)
	sw $s3, 16($sp)
	sw $s4 ,20($sp)
	sw $s5, 24($sp)
	sw $s6, 32($sp)
	jal getInstruction
	
getInstruction: 
	lw $s0, 0($sp)
	
	lw $s1, 12($sp) 
	
	beq $s1, $s0 done

	lw $s2, 0($s0)

	addi $s0, $s0, 4
	sw $s0, 0($sp)
	
	srl $s3, $s2, 26
	beqz $s3, getRType 
	
	bne $s3, 2 ,itypeCheck 
	j getInstruction 


getRType:
	andi $s4, $s2, 0x03E00000
	srl $s4, $s4, 21 
	lw $s5, 8($sp)
	beq $s4, $s5 ,increment
	j getRType2
increment:
	lw $s6 ,4($sp)
	addi $s6 ,$s6 ,1
	sw $s6 ,4($sp)
	
getRType2:
	andi $s4, $s2, 0x001F0000
	srl $s4, $s4, 16
	lw $s5 ,8($sp)
	beq $s4 ,$s5, increment2
	beqz $s3, getRType3
	j getInstruction
	
increment2:
	lw $s6, 4($sp)
	addi $s6 ,$s6, 1
	sw $s6 ,4($sp)	

	
getRType3:
	bnez $s3, getInstruction
	andi $s4, $s2, 0x0000F800
	srl $s4, $s4, 11
	lw $s5, 8($sp)
	beq $s4 ,$s5, increment3
	j getInstruction

increment3:
	lw $s6 ,4($sp)
	addi $s6 ,$s6 ,1
	sw $s6 ,4($sp)	
	j getInstruction 
	
itypeCheck:
	bne $s3, 3 ,getRType
	j getInstruction 

done:  
	la $a0, result
	li $v0 ,4
	syscall
	
	lw $a0 ,4($sp)
	li $v0 ,1
	syscall
	
	lw $s0 ,8($sp) 
	lw $s1, 4($sp) 
	lw $s2, 0($sp)
	
	lw $ra ,12($sp)
	lw $s3, 16($sp)
	lw $s4, 20($sp)
	lw $s5, 24($sp)
	lw $s6 ,32($sp)
	
	li $v0, 10
	syscall
	
finish:
	la $a0, error
	li $v0, 4
	syscall
	
	li $v0,10
	syscall	
